{"version":3,"sources":["api/character.ts","reducers/character.ts","components/Character/index.tsx","App.tsx","app/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","characterAPI","page","get","getCharacters","createAsyncThunk","arg","thunkAPI","then","res","console","log","data","dispatch","setCharacters","catch","e","slice","createSlice","name","initialState","info","count","pages","next","prev","results","reducers","state","action","payload","characterReducer","reducer","actions","Character","useDispatch","useEffect","App","exact","path","rootReducer","combineReducers","character","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAEMA,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,4CACTC,iBAAiB,EACjBC,QAAS,CAAC,8BAA+B,OAIhCC,EAAe,WACS,IAAnBC,EAAkB,uDAAH,EACzB,OAAOP,EAASQ,IAAT,gBAAsBD,KCCxBE,EAAgBC,YAAiB,2BAA2B,SAACC,EAAKC,GAC3EN,IACKO,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChBL,EAASM,SAASC,EAAcL,EAAIG,UAEvCG,OAAM,SAAAC,GACHN,QAAQC,IAAIK,SAIlBC,EAAQC,YAAY,CACtBC,KAAM,YACNC,aAvBqC,CACrCC,KAAM,CACFC,MAAO,EACPC,MAAO,EACPC,KAAM,GACNC,KAAM,IAEVC,QAAS,IAiBTC,SAAU,CACNb,cADM,SACQc,EAAOC,GACTA,EAAOC,YAMdC,EAAmBd,EAAMe,QAC9BlB,EAAiBG,EAAMgB,QAAvBnB,c,OCjBOoB,EAdG,WACd,IAAMrB,EAAWsB,cAMjB,OAJAC,qBAAU,WACHvB,EAAST,OACb,IAGC,6CCIOiC,MAZf,WACI,OACI,cAAC,IAAD,UACI,8BACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAnB,SAAyB,cAAC,EAAD,a,eCLvCC,EAAcC,YAAgB,CAChCC,UAAWX,IAGFY,EAAQC,YAAe,CAChCZ,QAASQ,EACTK,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,QCJvEC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRS,SAASC,eAAe,W","file":"static/js/main.9db5e547.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://rickandmortyapi.com/api/character',\n    withCredentials: true,\n    headers: {\"Access-Control-Allow-Origin\": \"*\"}\n\n})\n\nexport const characterAPI = {\n    getCharacters(page: number = 1) {\n        return instance.get(`?page=${page}`)\n    }\n}\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {characterAPI} from './../api/character'\nconst initialState: characterStateType = {\n    info: {\n        count: 0,\n        pages: 0,\n        next: '',\n        prev: ''\n    },\n    results: []\n}\n\nexport const getCharacters = createAsyncThunk('character/getCharacters', (arg, thunkAPI) => {\n    characterAPI.getCharacters()\n        .then(res => {\n            console.log(res.data)\n            thunkAPI.dispatch(setCharacters(res.data))\n        })\n        .catch(e => {\n            console.log(e)\n        })\n})\n\nconst slice = createSlice({\n    name: 'character',\n    initialState: initialState,\n    reducers: {\n        setCharacters(state, action: PayloadAction<characterStateType>) {\n            state = action.payload\n        }\n\n    }\n})\n\nexport const characterReducer = slice.reducer\nconst  {setCharacters} = slice.actions\n\n//types\nexport type characterStateType = {\n    info: infoPageType\n    results: Array<characterType>\n}\n\ntype infoPageType = {\n    count: number\n    pages: number\n    next: string,\n    prev: string\n}\n\ntype characterType = {\n    id: number\n    name: string\n    status: string\n    species: string\n    type: string\n    gender: string\n    origin: originType\n    location: locationType\n    image: string\n    episode: Array<string>\n    url: string\n    created: string\n}\n\ntype originType = {\n    origin: string\n    url: string\n}\n\ntype locationType = {\n    name: string\n    url: string\n}\n","import React, {useEffect} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport {getCharacters} from \"../../reducers/character\";\n\nconst Character = () => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n           dispatch(getCharacters())\n    }, [])\n\n    return (\n        <div>\n            Character\n        </div>\n    );\n};\n\nexport default Character;\n","import React from 'react';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport Character from \"./components/Character\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div>\n                <Switch>\n                    <Route exact path={'/'} ><Character/></Route>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\"\nimport thunkMiddleware from \"redux-thunk\"\nimport {characterReducer} from './../reducers/character'\n\nconst rootReducer = combineReducers({\n    character: characterReducer,\n})\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}